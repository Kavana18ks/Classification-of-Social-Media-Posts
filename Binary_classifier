#LogisticRegression
from sklearn.model_selection import train_test_split
import pandas as pd
df = pd.read_csv('Final_dataset.csv')
df['Cleaned_text'] = df['Cleaned_text'].fillna('')
independent=df.Cleaned_text
dependent=df.Category
in_train, in_test, de_train, de_test=train_test_split(independent,dependent,test_size=0.3)
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
tf=TfidfVectorizer()
lr=LogisticRegression(solver="sag",max_iter= 200) 
from sklearn.pipeline import Pipeline
model = Pipeline([("vectorizer",tf),("classifier",lr)])
model.fit(in_train,de_train)
ex=["i love popcorn"]
re=model.predict(ex)
print(re)
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score
prediction=model.predict(in_test)
print("confusion_matrix : \n",confusion_matrix(prediction,de_test))
print("Accuracy : ", accuracy_score(prediction, de_test))
print("Precision : ", precision_score(prediction, de_test, average='weighted') )
print("Recall_score : ", recall_score(prediction, de_test, average='weighted') )


#SVC(more time)
from sklearn.model_selection import train_test_split
import pandas as pd
df = pd.read_csv('Final_dataset.csv')
df['Cleaned_text'] = df['Cleaned_text'].fillna('')
independent=df.Cleaned_text
dependent=df.Category
in_train, in_test, de_train, de_test = train_test_split(independent, dependent, test_size=0.3)
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVC
tf = TfidfVectorizer()
svc = SVC(kernel='linear')           
from sklearn.pipeline import Pipeline
model = Pipeline([("vectorizer", tf),("classifier", svc)])
model.fit(in_train, de_train)
ex = ["i have fever"]
re = model.predict(ex)
print(re)
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score
prediction=model.predict(in_test)
print("confusion_matrix : \n",confusion_matrix(prediction,de_test))
print("Accuracy : ", accuracy_score(prediction, de_test))
print("Precision : ", precision_score(prediction, de_test, average='weighted') )
print("Recall_score : ", recall_score(prediction, de_test, average='weighted') )

#Naive Bayes classifier
from sklearn.model_selection import train_test_split
import pandas as pd
df = pd.read_csv('Final_dataset.csv')
df['Cleaned_text'] = df['Cleaned_text'].fillna('')
independent=df.Cleaned_text
dependent=df.Category
in_train, in_test, de_train, de_test = train_test_split(independent, dependent, test_size=0.3)
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import *
tf = TfidfVectorizer()
nb = BernoulliNB(alpha=0.1,fit_prior=False)
from sklearn.pipeline import Pipeline
model = Pipeline([("vectorizer", tf),("classifier", nb)])
model.fit(in_train, de_train)
ex = ["i have fever"]
re = model.predict(ex)
print(re)
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score
prediction=model.predict(in_test)
print("confusion_matrix : \n",confusion_matrix(prediction,de_test))
print("Accuracy : ", accuracy_score(prediction, de_test))
print("Precision : ", precision_score(prediction, de_test, average='weighted') )
print("Recall_score : ", recall_score(prediction, de_test, average='weighted') )


#Random Forest classifier(more time)
from sklearn.model_selection import train_test_split
import pandas as pd
df = pd.read_csv('Final_dataset.csv')
df['Cleaned_text'] = df['Cleaned_text'].fillna('')
independent=df.Cleaned_text
dependent=df.Category
in_train, in_test, de_train, de_test = train_test_split(independent, dependent, test_size=0.3)
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
tf = TfidfVectorizer()
rf = RandomForestClassifier(min_samples_split=2,n_estimators=150,criterion='entropy') 
from sklearn.pipeline import Pipeline
model = Pipeline([("vectorizer", tf),("classifier", rf)])
model.fit(in_train, de_train)
ex = ["i have fever"]
re = model.predict(ex)
print(re)
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score
prediction=model.predict(in_test)
print("confusion_matrix : \n",confusion_matrix(prediction,de_test))
print("Accuracy : ", accuracy_score(prediction, de_test))
print("Precision : ", precision_score(prediction, de_test, average='weighted') )
print("Recall_score : ", recall_score(prediction, de_test, average='weighted') )

#GradientBoostingClassifier
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.feature_extraction.text import TfidfVectorizer
import pandas as pd
df = pd.read_csv('Final_dataset.csv')
df['Cleaned_text'] = df['Cleaned_text'].fillna('')
independent=df.Cleaned_text
dependent=df.Category
in_train, in_test, de_train, de_test = train_test_split(independent, dependent, test_size=0.3)
tf = TfidfVectorizer()
gbm = GradientBoostingClassifier(n_estimators=150,max_depth=5,learning_rate=0.5,subsample=0.8,min_samples_leaf=2,)
from sklearn.pipeline import Pipeline
model = Pipeline([("vectorizer", tf),("classifier", gbm)])
model.fit(in_train, de_train)
ex = ["i have fever"]
re = model.predict(ex)
print(re)
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score
prediction=model.predict(in_test)
print("confusion_matrix : \n",confusion_matrix(prediction,de_test))
print("Accuracy : ", accuracy_score(prediction, de_test))
print("Precision : ", precision_score(prediction, de_test, average='weighted') )
print("Recall_score : ", recall_score(prediction, de_test, average='weighted') )
